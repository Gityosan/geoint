
type User @model @key(fields:["id"])
@key(name: "ByOwner", fields: ["owner"], queryField: "listUserByOwner")
@auth(rules:[
  {allow: public, provider: iam, operations: [ read ]},
  {allow: owner, ownerField: "owner", operations: [read, create, update, delete] },
  {allow: groups, groups: ["Master"], operations: [read, create, update, delete]}
]){
 id: ID!
 name: String
 introduction: String
 lat: Float
 lng: Float
 tag: [String]
 acquaintance: [ID] 
 userImageId: ID!
 icon: UserImage @connection(fields:["userImageId"])
 status: UserStatus!
 event: [Event] @connection(keyName: "EventByUser", fields: ["id"])
 owner: ID!
}


type Event @model @key(fields:["id"])
@key(name: "EventByUser", fields: ["userId"])
@key(name: "ByOwner", fields: ["owner"], queryField: "listEventByOwner")
@auth(rules:[
  {allow: public, provider: iam, operations: [ read ]},
  {allow: owner, ownerField: "owner", operations: [read, create, update, delete] },
  {allow: groups, groups: ["Master"], operations: [read, create, update, delete]}
]){
 id: ID!
 userId: ID!
 name: String
 eventImageId: ID!
 image: EventImage @connection(fields:["eventImageId"])
 introduction: String
 tag: [String]
 lat: Float
 lng: Float
 limit: Int
 reserved: Int
 start: AWSDateTime
 end: AWSDateTime
 from: AWSDateTime
 to: AWSDateTime
 comment: [Comment] @connection(keyName: "CommentByEvent", fields: ["id"])
 reported: Boolean
 owner: ID!
}

enum UserStatus {
 everyone
 welcome
 reject
}

type Comment @model @key(fields:["id"])
@key(name: "CommentByEvent", fields: ["eventId"])
@key(name: "ByOwner", fields: ["owner"], queryField: "lisByOwner")
@auth(rules:[
  {allow: public, provider: iam, operations: [ read ]},
  {allow: owner, ownerField: "owner", operations: [read, create, update, delete] },
  {allow: groups, groups: ["Master"], operations: [read, create, update, delete]}
]){
 id: ID!
 eventId: ID!
 author: User!
 value: String
 owner: ID!
}
type UserImage @model @key(fields:["id"])
@key(name: "ByOwner", fields: ["owner"], queryField: "listUserImageByOwner")
@auth(rules:[
  {allow: public, provider: iam, operations: [ read ]},
  {allow: owner, ownerField: "owner", operations: [read, create, update, delete] },
  {allow: groups, groups: ["Master"], operations: [read, create, update, delete]}
]){
 id: ID!
 name: String
 type: String
 size: Int
 alt: String
 url: String
 identityId: String!
 owner: ID!
}
type EventImage @model @key(fields:["id"])
@key(name: "ByOwner", fields: ["owner"], queryField: "listEventImageByOwner")
@auth(rules:[
  {allow: public, provider: iam, operations: [ read ]},
  {allow: owner, ownerField: "owner", operations: [read, create, update, delete] },
  {allow: groups, groups: ["Master"], operations: [read, create, update, delete]}
]){
 id: ID!
 name: String
 type: String
 size: Int
 alt: String
 url: String
 identityId: String!
 owner: ID!
}
